"""create initial models

Revision ID: 3b676f0c9dc0
Revises: 
Create Date: 2024-12-11 23:27:34.925049

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "3b676f0c9dc0"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ai_models",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column(
            "provider",
            sa.Enum("OPENAI", "ANTHROPIC", name="provider_type"),
            nullable=False,
        ),
        sa.Column("model_id", sa.String(length=50), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column("input_rate", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("batch_input_rate", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column("output_rate", sa.DECIMAL(precision=10, scale=2), nullable=True),
        sa.Column(
            "batch_output_rate", sa.DECIMAL(precision=10, scale=2), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    with op.batch_alter_table("ai_models", schema=None) as batch_op:
        batch_op.create_index("idx_aimodel_active", ["is_active"], unique=False)
        batch_op.create_index("idx_aimodel_provider", ["provider"], unique=False)

    op.create_table(
        "api_usage",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "provider",
            sa.Enum("OPENAI", "ANTHROPIC", name="provider_type"),
            nullable=False,
        ),
        sa.Column("model_id", sa.String(length=50), nullable=False),
        sa.Column("input_tokens", sa.Integer(), nullable=False),
        sa.Column("output_tokens", sa.Integer(), nullable=False),
        sa.Column("cost", sa.Float(), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("api_usage", schema=None) as batch_op:
        batch_op.create_index(
            "idx_usage_provider_model", ["provider", "model_id"], unique=False
        )
        batch_op.create_index("idx_usage_timestamp", ["timestamp"], unique=False)

    op.create_table(
        "approved_languages",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(length=5), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column(
            "is_default", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.CheckConstraint(
            "CASE WHEN is_default THEN is_active ELSE true END",
            name="ck_default_must_be_active",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
        sa.UniqueConstraint("name"),
        comment="Supported languages for content translation",
    )
    with op.batch_alter_table("approved_languages", schema=None) as batch_op:
        batch_op.create_index("idx_language_active", ["is_active"], unique=False)
        batch_op.create_index("idx_language_code", ["code"], unique=False)
        batch_op.create_index("idx_language_default", ["is_default"], unique=False)

    op.create_table(
        "media",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("filename", sa.String(length=255), nullable=False),
        sa.Column("original_filename", sa.String(length=255), nullable=False),
        sa.Column("file_path", sa.String(length=512), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=False),
        sa.Column("mime_type", sa.String(length=127), nullable=False),
        sa.Column(
            "media_type",
            sa.Enum(
                "IMAGE",
                "VIDEO",
                "DOCUMENT",
                "PDF",
                "SPREADSHEET",
                "OTHER",
                name="media_type_type",
            ),
            nullable=False,
        ),
        sa.Column(
            "source",
            sa.Enum("LOCAL", "YOUTUBE", "S3", name="media_source_type"),
            nullable=False,
        ),
        sa.Column("title", sa.String(length=255), nullable=True),
        sa.Column("caption", sa.Text(), nullable=True),
        sa.Column("alt_text", sa.String(length=255), nullable=True),
        sa.Column("external_url", sa.String(length=512), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        comment="Media files with metadata and relationships",
    )
    with op.batch_alter_table("media", schema=None) as batch_op:
        batch_op.create_index("idx_media_mime_type", ["mime_type"], unique=False)
        batch_op.create_index("idx_media_source", ["source"], unique=False)
        batch_op.create_index("idx_media_type", ["media_type"], unique=False)

    op.create_table(
        "social_media_accounts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "platform", sa.Enum("INSTAGRAM", name="platform_type"), nullable=False
        ),
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.Column("account_id", sa.String(length=100), nullable=False),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column(
            "credentials",
            sa.JSON(),
            nullable=False,
            comment="Encrypted credentials for the platform",
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "platform", "username", name="uq_social_media_accounts_platform_username"
        ),
        comment="Social media platform accounts configuration",
    )
    with op.batch_alter_table("social_media_accounts", schema=None) as batch_op:
        batch_op.create_index(
            "idx_social_media_account_active", ["is_active"], unique=False
        )
        batch_op.create_index(
            "idx_social_media_account_platform", ["platform"], unique=False
        )

    op.create_table(
        "taxonomies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        comment="Main content categorization hierarchy",
    )
    with op.batch_alter_table("taxonomies", schema=None) as batch_op:
        batch_op.create_index("idx_taxonomy_name", ["name"], unique=False)

    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("full_name", sa.String(length=100), nullable=False),
        sa.Column("password_hash", sa.String(length=200), nullable=False),
        sa.Column(
            "active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column("last_login_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        comment="Stores user authentication and profile information",
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index("idx_user_active", ["active"], unique=False)
        batch_op.create_index("idx_user_last_login", ["last_login_at"], unique=False)
        batch_op.create_index(batch_op.f("ix_users_email"), ["email"], unique=True)

    op.create_table(
        "agents",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column(
            "type",
            sa.Enum(
                "CONTENT_MANAGER",
                "RESEARCHER",
                "WRITER",
                "SOCIAL_MEDIA",
                "TRANSLATOR",
                name="agent_type",
            ),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("model_id", sa.Integer(), nullable=False),
        sa.Column("temperature", sa.Float(), nullable=False),
        sa.Column("max_tokens", sa.Integer(), nullable=False),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["model_id"], ["ai_models.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    with op.batch_alter_table("agents", schema=None) as batch_op:
        batch_op.create_index("idx_agent_active", ["is_active"], unique=False)
        batch_op.create_index("idx_agent_type", ["type"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_agents_model_id"), ["model_id"], unique=False
        )

    op.create_table(
        "categories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("taxonomy_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["taxonomy_id"], ["taxonomies.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("taxonomy_id", "name", name="uq_category_taxonomy_name"),
        comment="Sub-categories within taxonomies",
    )
    with op.batch_alter_table("categories", schema=None) as batch_op:
        batch_op.create_index("idx_category_name", ["name"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_categories_taxonomy_id"), ["taxonomy_id"], unique=False
        )

    op.create_table(
        "tags",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column(
            "status",
            sa.Enum("PENDING", "APPROVED", "REJECTED", name="content_status_type"),
            server_default=sa.text("'PENDING'"),
            nullable=False,
        ),
        sa.Column("approved_by_id", sa.Integer(), nullable=True),
        sa.Column("approved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["approved_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        comment="Content categorization tags with approval workflow",
    )
    with op.batch_alter_table("tags", schema=None) as batch_op:
        batch_op.create_index("idx_tag_name", ["name"], unique=False)
        batch_op.create_index("idx_tag_status", ["status"], unique=False)

    op.create_table(
        "translations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("entity_type", sa.String(length=50), nullable=False),
        sa.Column("entity_id", sa.Integer(), nullable=False),
        sa.Column("field", sa.String(length=50), nullable=False),
        sa.Column("language", sa.String(length=5), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column(
            "is_generated",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column("generated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("generated_by_id", sa.Integer(), nullable=True),
        sa.Column("approved_by_id", sa.Integer(), nullable=True),
        sa.Column("approved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["approved_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["generated_by_id"], ["ai_models.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(
            ["language"], ["approved_languages.code"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "entity_type",
            "entity_id",
            "field",
            "language",
            name="uq_translation_entity_field_lang",
        ),
        comment="Content translations with generation tracking",
    )
    with op.batch_alter_table("translations", schema=None) as batch_op:
        batch_op.create_index(
            "idx_translation_entity", ["entity_type", "entity_id"], unique=False
        )
        batch_op.create_index(
            "idx_translation_generated", ["is_generated"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_translations_language"), ["language"], unique=False
        )

    op.create_table(
        "article_suggestions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("main_topic", sa.Text(), nullable=False),
        sa.Column(
            "sub_topics",
            sa.ARRAY(sa.String(length=255)),
            server_default=sa.text("ARRAY[]::varchar[]"),
            nullable=False,
        ),
        sa.Column("point_of_view", sa.Text(), nullable=False),
        sa.Column(
            "level",
            sa.Enum(
                "ELEMENTARY",
                "MIDDLE_SCHOOL",
                "HIGH_SCHOOL",
                "COLLEGE",
                "GENERAL",
                name="article_level_type",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("PENDING", "APPROVED", "REJECTED", name="content_status_type"),
            server_default=sa.text("'PENDING'"),
            nullable=False,
        ),
        sa.Column("approved_by_id", sa.Integer(), nullable=True),
        sa.Column("approved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.Column("generation_started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_generation_error", sa.Text(), nullable=True),
        sa.Column("model_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["approved_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["model_id"], ["ai_models.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        comment="Article suggestions pending research and development",
    )
    with op.batch_alter_table("article_suggestions", schema=None) as batch_op:
        batch_op.create_index("idx_article_suggestion_level", ["level"], unique=False)
        batch_op.create_index("idx_article_suggestion_status", ["status"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_article_suggestions_category_id"),
            ["category_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_article_suggestions_model_id"), ["model_id"], unique=False
        )

    op.create_table(
        "prompt_templates",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("agent_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("template", sa.Text(), nullable=False),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["agent_id"], ["agents.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("agent_id", "name", name="uq_prompt_templates_agent_name"),
    )
    with op.batch_alter_table("prompt_templates", schema=None) as batch_op:
        batch_op.create_index("idx_prompt_template_active", ["is_active"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_prompt_templates_agent_id"), ["agent_id"], unique=False
        )

    op.create_table(
        "research",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("suggestion_id", sa.Integer(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("PENDING", "APPROVED", "REJECTED", name="content_status_type"),
            server_default=sa.text("'PENDING'"),
            nullable=False,
        ),
        sa.Column("approved_by_id", sa.Integer(), nullable=True),
        sa.Column("approved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.Column("generation_started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_generation_error", sa.Text(), nullable=True),
        sa.Column("model_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["approved_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["model_id"], ["ai_models.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["suggestion_id"], ["article_suggestions.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Research content for article suggestions",
    )
    with op.batch_alter_table("research", schema=None) as batch_op:
        batch_op.create_index("idx_research_status", ["status"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_research_model_id"), ["model_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_research_suggestion_id"), ["suggestion_id"], unique=True
        )

    op.create_table(
        "articles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("research_id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.Column("feature_image_id", sa.Integer(), nullable=True),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("excerpt", sa.Text(), nullable=True),
        sa.Column("ai_summary", sa.Text(), nullable=True),
        sa.Column(
            "level",
            sa.Enum(
                "ELEMENTARY",
                "MIDDLE_SCHOOL",
                "HIGH_SCHOOL",
                "COLLEGE",
                "GENERAL",
                name="article_level_type",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("PENDING", "APPROVED", "REJECTED", name="content_status_type"),
            server_default=sa.text("'PENDING'"),
            nullable=False,
        ),
        sa.Column("approved_by_id", sa.Integer(), nullable=True),
        sa.Column("approved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("published_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.Column("generation_started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_generation_error", sa.Text(), nullable=True),
        sa.Column("model_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["approved_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["category_id"], ["categories.id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["feature_image_id"], ["media.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["model_id"], ["ai_models.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["research_id"], ["research.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
        comment="Main article content with translations and relationships",
    )
    with op.batch_alter_table("articles", schema=None) as batch_op:
        batch_op.create_index("idx_article_level", ["level"], unique=False)
        batch_op.create_index("idx_article_published", ["published_at"], unique=False)
        batch_op.create_index("idx_article_status", ["status"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_articles_category_id"), ["category_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_articles_model_id"), ["model_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_articles_research_id"), ["research_id"], unique=False
        )

    op.create_table(
        "article_relationships",
        sa.Column("article_id", sa.Integer(), nullable=False),
        sa.Column("related_article_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["article_id"], ["articles.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["related_article_id"], ["articles.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("article_id", "related_article_id"),
    )
    with op.batch_alter_table("article_relationships", schema=None) as batch_op:
        batch_op.create_index(
            "idx_article_relationships_article", ["article_id"], unique=False
        )
        batch_op.create_index(
            "idx_article_relationships_related", ["related_article_id"], unique=False
        )

    op.create_table(
        "article_tags",
        sa.Column("article_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["article_id"], ["articles.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tag_id"], ["tags.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("article_id", "tag_id"),
    )
    with op.batch_alter_table("article_tags", schema=None) as batch_op:
        batch_op.create_index("idx_article_tags_article", ["article_id"], unique=False)
        batch_op.create_index("idx_article_tags_tag", ["tag_id"], unique=False)

    op.create_table(
        "social_media_posts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("article_id", sa.Integer(), nullable=False),
        sa.Column("account_id", sa.Integer(), nullable=False),
        sa.Column("image_id", sa.Integer(), nullable=True),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column(
            "hashtags",
            sa.ARRAY(sa.String(length=100)),
            server_default=sa.text("ARRAY[]::varchar[]"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("PENDING", "APPROVED", "REJECTED", name="content_status_type"),
            server_default=sa.text("'PENDING'"),
            nullable=False,
        ),
        sa.Column("approved_by_id", sa.Integer(), nullable=True),
        sa.Column("approved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("scheduled_for", sa.DateTime(timezone=True), nullable=True),
        sa.Column("posted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("post_url", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.Column("generation_started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_generation_error", sa.Text(), nullable=True),
        sa.Column("model_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"], ["social_media_accounts.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["approved_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["article_id"], ["articles.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["image_id"], ["media.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["model_id"], ["ai_models.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        comment="Social media posts with scheduling and tracking",
    )
    with op.batch_alter_table("social_media_posts", schema=None) as batch_op:
        batch_op.create_index(
            "idx_social_media_post_posted", ["posted_at"], unique=False
        )
        batch_op.create_index(
            "idx_social_media_post_scheduled", ["scheduled_for"], unique=False
        )
        batch_op.create_index("idx_social_media_post_status", ["status"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_social_media_posts_account_id"), ["account_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_social_media_posts_article_id"), ["article_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_social_media_posts_model_id"), ["model_id"], unique=False
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("social_media_posts", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_social_media_posts_model_id"))
        batch_op.drop_index(batch_op.f("ix_social_media_posts_article_id"))
        batch_op.drop_index(batch_op.f("ix_social_media_posts_account_id"))
        batch_op.drop_index("idx_social_media_post_status")
        batch_op.drop_index("idx_social_media_post_scheduled")
        batch_op.drop_index("idx_social_media_post_posted")

    op.drop_table("social_media_posts")
    with op.batch_alter_table("article_tags", schema=None) as batch_op:
        batch_op.drop_index("idx_article_tags_tag")
        batch_op.drop_index("idx_article_tags_article")

    op.drop_table("article_tags")
    with op.batch_alter_table("article_relationships", schema=None) as batch_op:
        batch_op.drop_index("idx_article_relationships_related")
        batch_op.drop_index("idx_article_relationships_article")

    op.drop_table("article_relationships")
    with op.batch_alter_table("articles", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_articles_research_id"))
        batch_op.drop_index(batch_op.f("ix_articles_model_id"))
        batch_op.drop_index(batch_op.f("ix_articles_category_id"))
        batch_op.drop_index("idx_article_status")
        batch_op.drop_index("idx_article_published")
        batch_op.drop_index("idx_article_level")

    op.drop_table("articles")
    with op.batch_alter_table("research", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_research_suggestion_id"))
        batch_op.drop_index(batch_op.f("ix_research_model_id"))
        batch_op.drop_index("idx_research_status")

    op.drop_table("research")
    with op.batch_alter_table("prompt_templates", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_prompt_templates_agent_id"))
        batch_op.drop_index("idx_prompt_template_active")

    op.drop_table("prompt_templates")
    with op.batch_alter_table("article_suggestions", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_article_suggestions_model_id"))
        batch_op.drop_index(batch_op.f("ix_article_suggestions_category_id"))
        batch_op.drop_index("idx_article_suggestion_status")
        batch_op.drop_index("idx_article_suggestion_level")

    op.drop_table("article_suggestions")
    with op.batch_alter_table("translations", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_translations_language"))
        batch_op.drop_index("idx_translation_generated")
        batch_op.drop_index("idx_translation_entity")

    op.drop_table("translations")
    with op.batch_alter_table("tags", schema=None) as batch_op:
        batch_op.drop_index("idx_tag_status")
        batch_op.drop_index("idx_tag_name")

    op.drop_table("tags")
    with op.batch_alter_table("categories", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_categories_taxonomy_id"))
        batch_op.drop_index("idx_category_name")

    op.drop_table("categories")
    with op.batch_alter_table("agents", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_agents_model_id"))
        batch_op.drop_index("idx_agent_type")
        batch_op.drop_index("idx_agent_active")

    op.drop_table("agents")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_email"))
        batch_op.drop_index("idx_user_last_login")
        batch_op.drop_index("idx_user_active")

    op.drop_table("users")
    with op.batch_alter_table("taxonomies", schema=None) as batch_op:
        batch_op.drop_index("idx_taxonomy_name")

    op.drop_table("taxonomies")
    with op.batch_alter_table("social_media_accounts", schema=None) as batch_op:
        batch_op.drop_index("idx_social_media_account_platform")
        batch_op.drop_index("idx_social_media_account_active")

    op.drop_table("social_media_accounts")
    with op.batch_alter_table("media", schema=None) as batch_op:
        batch_op.drop_index("idx_media_type")
        batch_op.drop_index("idx_media_source")
        batch_op.drop_index("idx_media_mime_type")

    op.drop_table("media")
    with op.batch_alter_table("approved_languages", schema=None) as batch_op:
        batch_op.drop_index("idx_language_default")
        batch_op.drop_index("idx_language_code")
        batch_op.drop_index("idx_language_active")

    op.drop_table("approved_languages")
    with op.batch_alter_table("api_usage", schema=None) as batch_op:
        batch_op.drop_index("idx_usage_timestamp")
        batch_op.drop_index("idx_usage_provider_model")

    op.drop_table("api_usage")
    with op.batch_alter_table("ai_models", schema=None) as batch_op:
        batch_op.drop_index("idx_aimodel_provider")
        batch_op.drop_index("idx_aimodel_active")

    op.drop_table("ai_models")

    op.execute("DROP TYPE IF EXISTS provider_type")
    op.execute("DROP TYPE IF EXISTS platform_type")
    op.execute("DROP TYPE IF EXISTS agent_type")
    op.execute("DROP TYPE IF EXISTS content_status_type")
    op.execute("DROP TYPE IF EXISTS article_level_type")
    op.execute("DROP TYPE IF EXISTS media_type_type")
    op.execute("DROP TYPE IF EXISTS media_source_type")
    # ### end Alembic commands ###
