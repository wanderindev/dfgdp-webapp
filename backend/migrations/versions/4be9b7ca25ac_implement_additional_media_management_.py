"""implement additional media management models

Revision ID: 4be9b7ca25ac
Revises: 8e2bd2320dbe
Create Date: 2024-12-14 17:49:00.305424

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import ENUM


# revision identifiers, used by Alembic.
revision = "4be9b7ca25ac"
down_revision = "8e2bd2320dbe"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TYPE agent_type ADD VALUE IF NOT EXISTS 'MEDIA_MANAGER'")
    op.execute("ALTER TYPE media_source_type ADD VALUE IF NOT EXISTS 'WIKIMEDIA'")
    op.create_table(
        "media_suggestions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("research_id", sa.Integer(), nullable=False),
        sa.Column(
            "commons_categories",
            sa.ARRAY(sa.String(length=255)),
            server_default=sa.text("ARRAY[]::varchar[]"),
            nullable=False,
            comment="Suggested Wikimedia Commons categories",
        ),
        sa.Column(
            "search_queries",
            sa.ARRAY(sa.String(length=255)),
            server_default=sa.text("ARRAY[]::varchar[]"),
            nullable=False,
            comment="Suggested search queries",
        ),
        sa.Column(
            "illustration_topics",
            sa.ARRAY(sa.String(length=255)),
            server_default=sa.text("ARRAY[]::varchar[]"),
            nullable=False,
            comment="Key topics needing illustration",
        ),
        sa.Column(
            "reasoning",
            sa.Text(),
            nullable=False,
            comment="AI's explanation for suggestions",
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.Column("generation_started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_generation_error", sa.Text(), nullable=True),
        sa.Column("model_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["model_id"], ["ai_models.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["research_id"], ["research.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("media_suggestions", schema=None) as batch_op:
        batch_op.create_index(
            "idx_media_suggestion_research", ["research_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_media_suggestions_model_id"), ["model_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_media_suggestions_research_id"),
            ["research_id"],
            unique=False,
        )

    op.create_table(
        "media_candidates",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("suggestion_id", sa.Integer(), nullable=False),
        sa.Column("commons_id", sa.String(length=255), nullable=False),
        sa.Column("commons_url", sa.String(length=512), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("author", sa.String(length=255), nullable=True),
        sa.Column("license", sa.String(length=100), nullable=False),
        sa.Column("license_url", sa.String(length=512), nullable=True),
        sa.Column("width", sa.Integer(), nullable=False),
        sa.Column("height", sa.Integer(), nullable=False),
        sa.Column("mime_type", sa.String(length=50), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            ENUM(
                "PENDING",
                "APPROVED",
                "REJECTED",
                name="content_status_type",
                create_type=False,
            ),
            server_default=sa.text("'PENDING'"),
            nullable=False,
        ),
        sa.Column("review_notes", sa.Text(), nullable=True),
        sa.Column("reviewed_by_id", sa.Integer(), nullable=True),
        sa.Column("reviewed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("thumbnail_path", sa.String(length=512), nullable=True),
        sa.Column("cached_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["reviewed_by_id"], ["users.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["suggestion_id"], ["media_suggestions.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "suggestion_id", "commons_id", name="uq_media_candidate_commons"
        ),
    )
    with op.batch_alter_table("media_candidates", schema=None) as batch_op:
        batch_op.create_index("idx_media_candidate_status", ["status"], unique=False)
        batch_op.create_index(
            "idx_media_candidate_suggestion", ["suggestion_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_media_candidates_suggestion_id"),
            ["suggestion_id"],
            unique=False,
        )

    with op.batch_alter_table("media", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "license",
                sa.String(length=100),
                nullable=True,
                comment="License type (e.g., CC BY-SA 4.0)",
            )
        )
        batch_op.add_column(
            sa.Column(
                "license_url",
                sa.String(length=512),
                nullable=True,
                comment="URL to license details",
            )
        )
        batch_op.add_column(
            sa.Column(
                "attribution",
                sa.Text(),
                nullable=True,
                comment="Required attribution text",
            )
        )
        batch_op.add_column(
            sa.Column(
                "source_url",
                sa.String(length=512),
                nullable=True,
                comment="Original source URL",
            )
        )
        batch_op.add_column(
            sa.Column(
                "commons_id",
                sa.String(length=255),
                nullable=True,
                comment="Wikimedia Commons file identifier",
            )
        )
        batch_op.create_index("idx_media_commons_id", ["commons_id"], unique=False)
        batch_op.create_table_comment(
            "Media files with metadata, licensing, and relationships",
            existing_comment="Media files with metadata and relationships",
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("media", schema=None) as batch_op:
        batch_op.create_table_comment(
            "Media files with metadata and relationships",
            existing_comment="Media files with metadata, licensing, and relationships",
        )
        batch_op.drop_index("idx_media_commons_id")
        batch_op.drop_column("commons_id")
        batch_op.drop_column("source_url")
        batch_op.drop_column("attribution")
        batch_op.drop_column("license_url")
        batch_op.drop_column("license")

    with op.batch_alter_table("media_candidates", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_media_candidates_suggestion_id"))
        batch_op.drop_index("idx_media_candidate_suggestion")
        batch_op.drop_index("idx_media_candidate_status")

    op.drop_table("media_candidates")
    with op.batch_alter_table("media_suggestions", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_media_suggestions_research_id"))
        batch_op.drop_index(batch_op.f("ix_media_suggestions_model_id"))
        batch_op.drop_index("idx_media_suggestion_research")

    op.drop_table("media_suggestions")
    op.execute(
        "COMMENT ON TYPE agent_type IS 'Warning: MEDIA_MANAGER value cannot be removed from enum'"
    )
    op.execute(
        "COMMENT ON TYPE media_source_type IS 'Warning: WIKIMEDIA value cannot be removed from enum'"
    )
    # ### end Alembic commands ###
