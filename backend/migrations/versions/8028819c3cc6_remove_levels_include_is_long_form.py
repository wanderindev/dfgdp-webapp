"""Remove levels include is_long_form

Revision ID: 8028819c3cc6
Revises: 0bf868942dc0
Create Date: 2025-01-25 18:39:13.718854

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "8028819c3cc6"
down_revision = "0bf868942dc0"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("prompt_templates", schema=None) as batch_op:
        batch_op.drop_index("idx_prompt_template_active")
        batch_op.drop_index("ix_prompt_templates_agent_id")

    op.drop_table("prompt_templates")
    with op.batch_alter_table("article_relationships", schema=None) as batch_op:
        batch_op.drop_index("idx_article_relationships_article")
        batch_op.drop_index("idx_article_relationships_related")

    op.drop_table("article_relationships")
    with op.batch_alter_table("article_suggestions", schema=None) as batch_op:
        batch_op.drop_index("idx_article_suggestion_level")
        batch_op.drop_column("tokens_used")
        batch_op.drop_column("level")

    with op.batch_alter_table("articles", schema=None) as batch_op:
        batch_op.drop_index("idx_article_level")
        batch_op.drop_column("tokens_used")
        batch_op.drop_column("level")

    with op.batch_alter_table("categories", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "is_long_form",
                sa.Boolean(),
                server_default=sa.text("true"),
                nullable=False,
            )
        )

    with op.batch_alter_table("media_suggestions", schema=None) as batch_op:
        batch_op.drop_column("tokens_used")

    with op.batch_alter_table("research", schema=None) as batch_op:
        batch_op.drop_column("tokens_used")

    with op.batch_alter_table("social_media_posts", schema=None) as batch_op:
        batch_op.drop_column("tokens_used")

    with op.batch_alter_table("translations", schema=None) as batch_op:
        batch_op.drop_column("tokens_used")

    op.execute("DROP TYPE IF EXISTS article_level_type")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        """
            CREATE TYPE article_level_type AS ENUM (
                'ELEMENTARY', 
                'MIDDLE_SCHOOL', 
                'HIGH_SCHOOL', 
                'COLLEGE', 
                'GENERAL'
            )
        """
    )

    with op.batch_alter_table("translations", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("tokens_used", sa.INTEGER(), autoincrement=False, nullable=True)
        )

    with op.batch_alter_table("social_media_posts", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("tokens_used", sa.INTEGER(), autoincrement=False, nullable=True)
        )

    with op.batch_alter_table("research", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("tokens_used", sa.INTEGER(), autoincrement=False, nullable=True)
        )

    with op.batch_alter_table("media_suggestions", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("tokens_used", sa.INTEGER(), autoincrement=False, nullable=True)
        )

    with op.batch_alter_table("categories", schema=None) as batch_op:
        batch_op.drop_column("is_long_form")

    with op.batch_alter_table("articles", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "level",
                postgresql.ENUM(
                    "ELEMENTARY",
                    "MIDDLE_SCHOOL",
                    "HIGH_SCHOOL",
                    "COLLEGE",
                    "GENERAL",
                    name="article_level_type",
                ),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column("tokens_used", sa.INTEGER(), autoincrement=False, nullable=True)
        )
        batch_op.create_index("idx_article_level", ["level"], unique=False)

    with op.batch_alter_table("article_suggestions", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "level",
                postgresql.ENUM(
                    "ELEMENTARY",
                    "MIDDLE_SCHOOL",
                    "HIGH_SCHOOL",
                    "COLLEGE",
                    "GENERAL",
                    name="article_level_type",
                ),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column("tokens_used", sa.INTEGER(), autoincrement=False, nullable=True)
        )
        batch_op.create_index("idx_article_suggestion_level", ["level"], unique=False)

    op.create_table(
        "article_relationships",
        sa.Column("article_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "related_article_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["article_id"],
            ["articles.id"],
            name="article_relationships_article_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["related_article_id"],
            ["articles.id"],
            name="article_relationships_related_article_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "article_id", "related_article_id", name="article_relationships_pkey"
        ),
    )
    with op.batch_alter_table("article_relationships", schema=None) as batch_op:
        batch_op.create_index(
            "idx_article_relationships_related", ["related_article_id"], unique=False
        )
        batch_op.create_index(
            "idx_article_relationships_article", ["article_id"], unique=False
        )

    op.create_table(
        "prompt_templates",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("agent_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("template", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["agents.id"],
            name="prompt_templates_agent_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="prompt_templates_pkey"),
        sa.UniqueConstraint("agent_id", "name", name="uq_prompt_templates_agent_name"),
    )
    with op.batch_alter_table("prompt_templates", schema=None) as batch_op:
        batch_op.create_index(
            "ix_prompt_templates_agent_id", ["agent_id"], unique=False
        )
        batch_op.create_index("idx_prompt_template_active", ["is_active"], unique=False)

    # ### end Alembic commands ###
